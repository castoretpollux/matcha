from django.utils.functional import classproperty
from django.utils.translation import gettext as _

from django.conf import settings
from django.core.cache import caches

import replicate
import ollama

from machinery.pipelines.base import BasePipeline
import core.models as core_models

from lib.uigenerator import ReplicateModelGenerator
from lib.constants import KIND_TEXT

djangocache = caches['djangocache']


class ReplicatePipeline(BasePipeline):

    MODEL = None
    VERSION = None
    TITLE_LLM = None

    def __init__(self, session):
        super(ReplicatePipeline, self).__init__(session)
        self.replicate = replicate.Client(api_token=settings.REPLICATE_API_TOKEN)
        self.title_generator = ollama.Client(host=settings.OLLAMA_BACKEND_URL)

    @classmethod
    def get_default_label(cls):
        label_tpl = _('Generate image WITH %s')
        return label_tpl % (cls.MODEL,)

    @classmethod
    def get_default_description(cls):
        description_tpl = _('This pipeline will use model %s and Replicate to generate some things')
        return description_tpl % (cls.MODEL,)

    @classmethod
    def format_request(cls, request_message: core_models.ChatSessionMessage) -> str:
        formated_request = request_message.data.get('prompt', None)
        if not formated_request:
            formated_request = request_message.data.get('text', '')
        return formated_request

    @classmethod
    def get_replicate_datas(cls):
        schema_key = f'replicate_schema_{cls.model_formated}'
        schema = djangocache.get(schema_key, None)
        if not schema:
            ReplicateModelGenerator.get_replicate_datas(cls.MODEL, cls.VERSION)

    @classproperty
    def pydantic_model(cls):
        # Get schema
        schema_key = f'replicate_schema_{cls.model_formated}'
        schema = djangocache.get(schema_key, None)
        if not schema:
            cls.get_replicate_datas()
            schema = djangocache.get(schema_key)

        # Get model
        pydantic_model = ReplicateModelGenerator.get_pydantic_model(cls.MODEL, schema)

        # Set layout
        layout = djangocache.get(f'replicate_layout_{cls.model_formated}')
        setattr(pydantic_model, 'layout', lambda: layout)

        return pydantic_model

    @classproperty
    def output(cls) -> str:
        return getattr(cls, 'OUTPUT') or djangocache.get(f'replicate_output_{cls.model_formated}', KIND_TEXT)

    @classproperty
    def input(cls) -> str:
        return getattr(cls, 'INPUT') or djangocache.get(f'replicate_input_{cls.model_formated}', KIND_TEXT)

    @classproperty
    def generated_output(cls) -> str:
        return djangocache.get(f'replicate_generated_output_{cls.model_formated}', KIND_TEXT)

    @classproperty
    def model_formated(cls) -> str:
        return cls.MODEL.replace('/', '_').replace('-', '_')

    @classproperty
    def model_version(cls):
        return '%s:%s' % (cls.MODEL, cls.VERSION)

    def set_session_title(self, prompt):
        return "Generated by a replicate model"
